 4 
    app.xx.push('as');

    5

6 MVC和MVP和MVVM
    MVC 
    M指model模型，数据层 负责数据的处理和获取数据接口层
    V View视图 视图层是指用户看到并与之交互的界面 
    C controller控制器 是M和V之间的中间人
    V传送指令到C C完成业务逻辑后要求M改变状态 M将新的数据发送到V 所有通信都是单向

    MVP 
    将C变为Presenter(广播)各部分分和P向连都为双向两个单箭头
    V中不部署如何业务逻辑 称为被动视图(Passive View)而Presenter非常厚所有逻辑在这

    MVVM
    将Presenter层替换为ViewModel
    View和ViewModel双箭头绑定 视图层变化自动反映在ViewModel反之亦然
    一个ViewModel和一个view绑定

    app=ViewModel data=model

7 MVVM架构

8 配置模板
    data放数据
    prop放组件
    methods里存放事件的方法

9 配置devtool

10 mustache语法
    {{msg}}
    {{msg+''+site}}

11插值指令
    v-once 值不改变

    v-text="msg" 设置值会覆盖里面

    v-html="site" 转换为页面

    v-pre 不产生编译

    v-cloak 在实例解析结束后删除 

13 v-bind
    动态绑定
    v-bind:src="img"
    :src

14 v-bind 绑定
    :class="{f60:true,f50:false}"
    :class="[red, f60]"
    :class="getClass()"
    methods:{getClass(){return[this.red]}}

    :style="{fontSize:f50}"

17 v-on 
    v-on:click="add"
    v-on:=@
    arguments打印全部
    获取事件$event
    不带参数
    add add()
    带参数
    add('2')
    带参数也需要事件对象
    add('2',$event)

19 修饰符绑定
    阻止冒泡
    @add.stop
    或者
    add(event)
    event.stopPropagation()

    @add.prevent

    @add.once只产生一次

    @keyuo按键事件
    @keyup.enter监控回车

20 计算属性
    函数
    {{getFullName()}}
    计算属性
      {{fullName}}
    computed:{
        本质是属性 写法如函数，命名如属性
        fullName(){
            return
        }
    }

    members:[(id:'22',ad:'32')]
     computed:{
        fullName(){
            let total =0;
            for(let members of this.members){
            total+=members.id;  
            }
                return
        }
    
    }

23 函数和计算属性区别
    函数 
    每次重新运算
    计算属性 
    会缓冲值如果相同直接调用


24 v-if 和v-show
    if是真正条件渲染
    show用css控制
    v-show="flag"
    v-show="!flag"
25 if和show区别

26 v-for 遍历数组
    li v-for="p in ppp">{{p}}
    ppp:[1,2,3]
27 对象
     li v-for="p in ppp">{{p}}
        li v-for="(p,key) in ppp">{{key}}{{p}}
    ppp:{age:[1,2,3],name:'ad'}

28 案例

31 绑定key的条件和原因
    :key="item.id"

32 未知bug

33 model
    绑定表单
    v-model.lazy 焦点结束再变
    .number int类型
    .trim 去掉空格

37 指令案例
    this.persons.splice(index,1);删除

41 基本使用
    app.component定义
      //挂载组件实例
        app.mount('#app');
42 命名规范
    不能驼峰
    全局可以用在局部

43 全局组件
    先注册再挂载
44 局部组件
    components 组件选项

45 组件标签化
    <script type="text/template" id=""></script>解析模板语言
    template

46组件的data选项数据不能共享

47 必须是函数
    每个组件独立状态不受干扰

49组件通信 props
    只指定名称 props:['name','age']

    指定名称和类型 props:{name:String,age:Number}

    指定名称类型和必要性默认值 props:{name:{type:String,required:true,default:xxx }}

51 使用注意
    数据类型 String Number Boolean Array Object Date Function Symbol 也支持自定义类型
    html无法识别驼峰

52 自定义事件
    父子    
    绑定事件监听    <lk-box @box-click="boxFunc"></lk-box>
    触发事件    this.$emit('boxClick','lkxy');

    多数据 以数组或对象 

    

54 ref的使用
    父子组件互相访问 父访问子 $refs
    子访问父 $parent


55 root和parent
    1 子组件访问父组件
    this.$parent  this.$parent.abc 
    2 子组件中访问根组件
    this.$root

56插槽的使用
    子组件中的提供给父元素组件使用的一个占位符 用slot
    父组件可以在这个占位父中填充任何模板代码 html 组件
    填充的内容还会替换子组件的slot

57 作用域插槽
    <template v-slot:header> name header
    <template v-slot:default>找无名

58 渲染作用域
    父级模板里的所有内容都是在父级作用域中编译的
    子模板里的内容都是在子作用域中编译的

59 作用域插槽
    父组件替换插槽中的标签
    但使用的是子组件的数据
    <slot :data="">
      <template v-slot:default="接收数据" >{{接收数据.data.join('--')}}

60 动态组件
    当组件之间切换的时候，有时会想保持组件状态，避免反复渲染
    根据数据的变化，结合component标签，动态切换组件的显示
        <!-- <keep-alive>
                <component :is="cItem"></component>
            </keep-alive> -->

61 异步组件
    通过defineAsyncComponent方法实现异步组件
    Promise(())

62 组件生命周期
    在一个组件的生命周期范围内 某一时刻会自动执行的函数
    beforeCreate 在实例生成之前自动执行
    created     在实例生成之后自动执行
    beforeMount 在组件内容被渲染之前被调用
    mouted      渲染之后调用

    多次调用
    beforeUpdate 数据发生变化调用
    updated        数据发生变化页面也变化之后

    beforeUnmount vue实例失效前
    unmounted       已经结束
    setTimeout(()=>{},2000)延时销毁

64 错误捕抓
    errorCaptured(err,instance,info){}
    
65 watch侦听器
    计算属性
    computed:{memberPrice(){return this.}}
    watch:{price(current原,prev现)}
    计算属性在调用时需要在模板中渲染，修改计算所依赖元数据，watch只需要在调用时只需修改元数据
    计算属性默认深度依赖  watch默认浅度观测
    计算属性适合做筛选 ，不可异步  watch适合做执行异步活开销较大操作

66 单向数据流

67 动态绑定传参

68 no props使用
    inheritAttrs:false 接收属性
    多个不生效
    获取v-bind="$attrs"
    :style="$attrs.info" 获取单个

69 自定义动画
    通过操作css的trasition或animation可以给特定目标元素添加 移除class
    xxx-enter/xxx-leave-to:指定隐藏的样式
    xxx-enter-active:指定显示的transition
    xxx-leave-active:指定隐藏的transition
    
70 过渡效果

71 封装调用
    v-enter-form 进入
    v-enter-active 中
    v-enter-to

    @keyframes shake-from{
        0%{

        }
        100%{}
    }

    <transition type="animation" 动画为主 
    :duration="1000"控制所有效果的时长
    :duration="{enter:3000,leave:100}"

    enter-active-class=""

75 js调用动画
    <transition
  @before-enter="beforeEnter"
  @enter="enter"
  @after-enter="afterEnter"
  @enter-cancelled="enterCancelled"
  @before-leave="beforeLeave"
  @leave="leave"
  @after-leave="afterLeave"
  @leave-cancelled="leaveCancelled"
  :css="false"
 >
  <!-- ... -->
    // ...
 methods: {
  // --------
  // 进入时
  // --------

  beforeEnter(el) {
    // ...
  },
  // 当与 CSS 结合使用时
  // 回调函数 done 是可选的
  enter(el, done) {
    // ...
    done()
  },
  afterEnter(el) {
    // ...
  },
  enterCancelled(el) {
    // ...
  },

  // --------
  // 离开时
  // --------

  beforeLeave(el) {
    // ...
  },
  // 当与 CSS 结合使用时
  // 回调函数 done 是可选的
  leave(el, done) {
    // ...
    done()
  },
  afterLeave(el) {
    // ...
  },
  // leaveCancelled 只用于 v-show 中
  leaveCancelled(el) {
    // ...
  }
 }
 </transition>
 
76 多组元素无缝动画
      mode属性专门用来控制是先显示离场和入场动画的顺序的。比如现在想让离场动画先显示，
    然后再显示入场动画。就可以使用mode="out-in".

    让进入页面，开始就产生动画效果，可以在<transition>标签上加上appear属性就可以实现。

    appear属性的意思是初次对某一个元素进行默认显示的时候也进行动画显示。

78 列表过渡
     <transition-group>

79 mixin使用
    一个 mixin 对象可以包含任意组件选项。当组件使用 mixin 对象时，
    所有 mixin 对象的选项将被“混合”进入该组件本身的选项。
     mixins: [myMixin]

    如果有不同的合并
     本身的优先级高于加入的

    生命周期函数两种都执行先执行mixins的

    $options    用于当前组件实例的初始化选项。当你需要在选项中包含自定义 property 时会有用处：
     customOption: 'foo',
    created() {
    console.log(this.$options.customOption) // => 'foo'

    通过配置决定使用哪个里面的属性
    app1.config.optionMergeStrategies.xxx=(mixinVal,appValue)=>{return appValue || mixinVal}

    全局配置mixin
    app1.mixin()

82 自定义指令
    全局指令
    xxx.directive('xx',{

    })

    局部指令
    const xxx={
    xx:{}
    }
    directives:xxx 挂载
    使用v-xx

    created：在绑定元素的 attribute 或事件监听器被应用之前调用。在指令需要附加在普通的 v-on 事件监听器调用前的事件监听器中时，这很有用。

    beforeMount：当指令第一次绑定到元素并且在挂载父组件之前调用。

    mounted：在绑定元素的父组件被挂载前调用。

    beforeUpdate：在更新包含组件的 VNode 之前调用。

    updated：在包含组件的 VNode 及其子组件的 VNode 更新后调用。

    beforeUnmount：在卸载绑定元素的父组件之前调用

    unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次

    (el, binding) el拿到元素 binding拿到数据
     el.style.position = 'fixed'    el.style[s] = binding.value + 'px'


85 teleport传送门
     Teleport 提供了一种干净的方法，允许我们控制在 DOM 中哪个父节点下渲染了 HTML，
     而不必求助于全局状态或将其拆分为两个组件。
     <teleport to="body"> 传送门

86 optionsAPI缺陷
    基于函数的api
    
    选项式 API 的生命周期选项和组合式 API 之间的映射

    beforeCreate -> 使用 setup()

    created -> 使用 setup()

    beforeMount -> onBeforeMount

    mounted -> onMounted

    beforeUpdate -> onBeforeUpdate

    updated -> onUpdated

    beforeUnmount -> onBeforeUnmount

    unmounted -> onUnmounted

    errorCaptured -> onErrorCaptured

    renderTracked -> onRenderTracked

    renderTriggered -> onRenderTriggered

    activated -> onActivated

    deactivated -> onDeactivated

87 setup基本认知
    setup(props，context) props传递 context上下文
    不能用this未挂载

88 re的使用
    让基础类型的数据具备响应式
    引入ref
    const {ref}=Vue;
    let msg =ref('asd')

    修改值
    msg.value

89 reactive的使用
    让引用类型的数据具备响应式
        引入reactive
    const {reactive}=Vue;
    let obj=reactive({name:'xx',sex:'x'})
    let arr=reactive(['vue','react'])
    修改 
    obj.name='xx'

90 readonly的使用
      引入readonly8
    const {readonly}=Vue;
    只允许读不允许修改

91 toRefs的使用
    引入toRefs
    const{name,sex}=toRefs(obj);
    return{name,sex}

92 toRef 
    变成响应式可以
    obj.name='xx';== name.value=''
    非必传
    let age=toRef(obj,'age') 检查是否有age没有将创建出age

93 contex的使用
    const{attrs,slots,emit}=context attrs=props slots插槽 emit发射自定义事件

    const{slots}=context 获取插槽
    slots.default()拿到元素对象
    slots.default()[0].props       第一个元素的props

    获取h const{h}=Vue
    return ()=>h('div',{},[slots.default()])
    
    
97 计算属性新用法
    let num=component(()=>{
        return num1*10;
    })

    使用get和set方法
    
99 watch新用法

101 watchEffect

102 provide 和inject

104 生命周期钩子新写法

