106 安装vue Cli
    vue -V查看版本
    npm update -g @vue/cli 升级最新
    npm init @vitejs/app wo
    vue create @vitejs/app
    vue create xxx
    cd xxx
    npm install
    npm install vue-loader-v16
    npm install vue-router@4
    npm run serve

    npm install axios -g
    npm install axios

107 目录剖析
    dependencies 生产依赖
    devDependencies 开发依赖

    assets 放音频 图片
    components 放局部组件
    pages 页面级别组件
    APP.vue 项目级别组件汇聚地
    main.js 输出项目级别组件

109 体验案例1
    style scoped 节流不让其他组件使用
110 2

111 3

122 概念路由
    
123 后端渲染

124 前后端分离

125 前端路由
    单页面应用程序

126 history和hash
    hash 通过监听浏览器的onhashchange()事件变化，查找对应的路由规则 #/

    利用HTML5 History Interface 中新增的pushState() 和replaceState()

127 项目集成VueRouter

128 基本使用
     {path:'/',redirect:'home'},

129 模式选择
    hash 在内部传递的实际URL之前使用了一个哈希字符
    这部分URL从未被发送到服务器，不需要在服务器层面上进行任何特殊处理

    history 用户在浏览器直接访问嵌套路由时会404
    需在服务器添加一个回退路由

130 activeClass
    active-class="cuttent" 选中样式
    简化直接配置
    .router-link-active{}

    在index中设置 linkActiveClass:'xx'
    .xx{}

131 js实现路由
    replace 不能退回前进

    import router from "./router";
    @click="home()"
    const home=()=>{
        router.push('/home')
    }

132 动态路由
     {path:'/news/:id',component:News},
     {{$route.params.id}} 当前活动的 router全局

     import {useRoute} from 'vue-router'
       const route =useRoute()
        console.log(route.params.id);

133 路由懒加载
    const Home=()=>import('./../components/Home.vue')

134 路由嵌套
       children:[
            {path:'msg',component:MineMsg},
            {path:'order',component:MineOrder}
        ]
        在父路由里 子不用/

135 参数传递
    params
    query
    :to="{path:'/circle',query:{name:'lk',age:10}}"
    {{$route.query.name}}
      let route = useRoute()
    console.log(route.query);
136 
        const news = () => {
      router.push("/news/" + newsId.value);
    };
    const circle = () => {
      router.push({
        path: "/circle",
        query: { name: "l22k", site: "it.com", age: 10 },
      });
    };
    
137 router和route

138 路由全局前置守卫
    在进入路由前
    一个路由匹配到的所有路由记录会暴露为
     $route 对象(还有在导航守卫中的路由对象)的$route.matched 数组。
     我们需要遍历这个数组来检查路由记录中的 meta 字段，
     但是 Vue Router 还为你提供了一个 $route.meta 方法，
     它是一个非递归合并所有 meta 字段的

     ,meta:{title:'首页'}
     router.beforeEach((to, from, next) => {
    document.title = to.meta.title
    next()
        }
    )
    
139 组件内守卫
    引入onBeforeRouteLeave,onBeforeRouteUpdate

140 keep alive
    vue2
    keep-alive
        router-view

    vue3
      <router-view v-slot="{Component}">
      <keep-alive>
        <component :is="Component"></component>
      </keep-alive>
    </router-view>

141
    include-string|RegExp|Array 只有名称匹配的组件会被缓存
    exclude-string|RegExp|Array 任何名称匹配的组件都不会被缓存
    max-number|string 最多可以缓存多少组件实例

    在路由配置keepAlive:true
     <keep-alive>
        <component :is="Component" v-if="$route.meta.keepAlive"></component>
      </keep-alive>
          <component :is="Component" v-if="!$route.meta.keepAlive"></component>

150 Promise
 解决回调地狱
 用链式思维解决异步的操作

 三种状态
 Pending Promise对象实例创建时候的初始状态
 Fulfilled 成功状态
 Rejected 失败状态
 状态不可回退

 require(‘http’) 内置模块

151
 创建一个promise
 let p1=new Promise(executor:(resolve,reject)=>{
 resolve()
 })
 resolve 成功 reject失败
 
 p1.then(onfulfilled:(data)=>{})获取成功的data

152

153
 Promise.all()

154 axios

155 get 
 axios({
     method:'get',
     url:'',
     Promise:{}
 }).then((res)=>{}).catch((error)=>{})
 返回的是应该promise 用.then(()=>{})

 axios.get('/user', {
    params: {
      ID: 12345
    }
  })
  参数用params

156 post 
 参数用data

157 发起并发请求
 axios.all 可以放入多个请求的数组
 axios.all 返回的结果是一个数组，可以使用axios.spread 将数组的值展开

 axios.all([axios({}),axios({})])

 .then(axios.spread((res1,res2)=>{
     
 }))

158 常用配置选项
 请求地址 url:'xx'
 请求类型 method:'get'
 请求根路径  baseURL: 'https://some-domain.com/api/'
 请求前数据处理transformRequest: [function (data, headers) {
    // 对 data 进行任意转换处理
    return data;
  }],

 请求后数据处理  transformResponse: [function (data) {
    // 对 data 进行任意转换处理
    return data;
  }],

 自定义请求头 headers: {'X-Requested-With': 'XMLHttpRequest'},
 URL查询对象 params: {
    ID: 12345
  },
 URL查询对象序列化
 request body
 超时设置 timeout: 1000,
 跨域是否带token
 自定义请求处理
 身份验证 auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  },
 响应数据规则 responseType: 'json', // default

159 全局配置 
 引入 import axios from 'axios'
 axios.defaults.baseURL='xxx'

160 封装
 import axios from "axios";
 export default function ajax(url = '', params = '', type = 'GET') {
    return new Promise((resolve, reject) => {
        let promise
        // 判断请求类型
        if (type.toUpperCase() === 'GET') {
            promise = axios({
                url: url,
                params
            })

        } else if (type.toUpperCase() === 'POST') {
            promise = axios({
                method: 'post',
                url,
                data: params
            })
        }
        //返回处理
        promise.then((res) => {
            resolve(res)
        }).catch((error)=>{
            reject(error)
        })
    })
 }
161 封装调用
 const getReq = () => {
    axios(
        "http://demo.itlike.com/web/xlmc/api/homeApi/categoriesdetail/lk001",

        {
          id: "lk001",
          name: "like",
          age: 10,
        }
      )
        .then((res) => {
          console.log(res);
        })
        .catch((error) => {
          console.log(error);
        });
    };

    并发请求 
    Promise.all
162 请求和响应拦截

163 vuex

164

165 vuex集成

166 vuex获取共享状态

167 修改共享状态

168 vuex异步状态

169 vuex改进用法

170 日程改造

175 vuex细节

176 vuex响应式系统

177 vuex模板分割

178 













